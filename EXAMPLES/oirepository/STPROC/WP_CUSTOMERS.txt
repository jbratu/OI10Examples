function WP_Customers(Instruction, Handle, Info)

*****************************************************************************
*
* Name       :  WP_Customers
* Description:  Warehouse Procedure
*
* LH Table   :  CUSTOMERS
* DataSets   :  WP_CUSTOMERS
* SQL Tables :  customers
*
* History (Date, Initials, Notes)
*   10/05/10  cwp  Generated by the Create Warehouse Procedure wizard.
*
*****************************************************************************

declare function SQLExp_Select

$insert Logical
$insert DS_Equates
$insert XO_Equates

equ CRLF$ to \0D0A\

******
* Main
******
  Ret = TRUE$
  on Instruction gosub CreateTables, ClearTables, DropTables, ProcessInit, ProcessRecord, ProcessTerm
  return Ret


*******************
* Create SQL Tables
*******************
* Instruction [in ] - 1
* Handle      [in ] - Query Handle (hQry)
* Ret         [out] - TRUE$ on success, FALSE$ otherwise
CreateTables:
  Script  = "create table customers": CRLF$
  Script := "       (": CRLF$
  Script := "       id integer not null primary key": CRLF$
  Script := "       )"
  gosub ExecuteScript
return


******************
* Clear SQL Tables
******************
* Instruction [in ] - 2
* Handle      [in ] - Query handle (hQry)
* Ret         [out] - TRUE$ on success, FALSE$ otherwise
ClearTables:
  Script  = "delete *": CRLF$
  Script := "from   customers"
  gosub ExecuteScript
return


*****************
* Drop SQL Tables
*****************
* Instruction [in ] - 3
* Handle      [in ] - Query handle (hQry)
* Ret         [out] - TRUE$ on success, FALSE$ otherwise
DropTables:
  Script  = "drop table customers"
  gosub ExecuteScript
return


**********************************
* Initialize Warehousing Procedure
**********************************
* Instruction [in ] - 4
* Handle      [in ] - Connection handle (hXO)
*             [out] - @fm-delimited DataSet handles (hDS)
* Info        [in ] - Requested warehouse type (e.g. FULL, UPDATES)
*             [out] - LH table name
* cursor #0   [out] - A select list of keys to warehouse
* @reccount   [out] - Number of keys in the select list
* Ret         [out] - TRUE$ on success, FALSE$ otherwise
ProcessInit:
  Table      = "CUSTOMERS"
  DSNames    = "WP_CUSTOMERS"
  DSHandles  = ""

 * the SQLExp_Select function selects the LH records to warehouse;
 * by encapsulating this functionality in a separate procedure,
 * addition warehouse types can be added without requiring changes
 * to individual Warehouse Procedures
  clearselect 0
  Ret = SQLExp_Select(Table, Info)

  if Ret then
   * create DataSets
    Count = count(DSNames, @fm) + (DSNames # "")
    for i = 1 to Count
      hDS = DSInstance(DSNames<i>, Handle)
      if hDS else
        Ret = FALSE$
      end
    while Ret
      DSHandles<i> = hDS
    next i

   * if one DataSet failed creation, destroy all DataSets
    if Ret else
      for i = 1 to Count
        hDS = DSHandles<i>
        if hDS then
          DSMethod(hDS, DS_DESTROY$)
          DSHandles<i> = 0
        end
      next i
    end
  end

 * return DataSet handles in Handle parameter
  Handle = DSHandles

 * return LH table name in Info parameter
  Info = Table
return


************************
* Warehouse an LH Record
************************
* Instruction [in ] - 5
* Handle      [in ] - @fm-delimited DataSet handles (hDS)
* Info        [in ] - if TRUE$, the Warehouse Procedure must first remove
*                     any existing data from the warehouse which corresponds
*                     to this record
* @id         [in ] - the ID of the LH record
* @record     [in ] - the LH record
* @mv         [in ] - zero (all)
* @dict       [in ] - the table's dictionary file handle
* Ret         [out] - TRUE$ on success, FALSE$ otherwise
ProcessRecord:
 * calculate "base" key fields
  Val_Id = {ID}

 * delete existing data
  if Info then
   * set DataSet arguments (the base key fields)
    Args      = ""
    Args<1,1> = "id_arg"

    Vals      = ""
    Vals<1>   = Val_Id

    Count = count(Handle, @fm) + (Handle # "")
    for i = 1 to Count
      Ret = DSSetProperty(Handle<i>, DS_ARG$, Vals, Args)
    next i

   * execute DataSets
    for i = 1 to Count
      Ret = DSMethod(Handle<i>, DS_EXECUTE$)
    while Ret
    next i

   * delete all rows from DataSets
    if Ret then
      for i = 1 to Count
        DSGetProperty(Handle<i>, DS_ROWCOUNT$, RowCount)
        DSSetProperty(Handle<i>, DS_ROWID$, 1)
        for iRow = 1 to RowCount
          DSMethod(Handle<i>, DS_DELETE$)
        next iRow
      next i
    end
  end

 * insert new data
  if Ret and len(@record) then
   * calculate all used fields


   * populate the WP_CUSTOMERS DataSet (single-valued data)
    Row = ""
    Row<1> = Val_Id

    Ret = DSSetProperty(Handle<1>, DS_WORK_ROW$, Row)
    if Ret else return
    Ret = DSMethod(Handle<1>, DS_APPEND_WORK$)
    if Ret else return
  end
return


*********************************
* Terminate Warehousing Procedure
*********************************
* Instruction [in ] - 6
* Handle      [in ] - @fm-delimited DataSet handles (hDS)
* Ret         [out] - TRUE$ on success, FALSE$ otherwise
ProcessTerm:
 * destroy all DataSets
  Count = count(Handle, @fm) + (Handle # "")
  for i = 1 to Count
    hDS = Handle<i>
    if hDS then
      DSMethod(hDS, DS_DESTROY$)
      Handle<i> = 0
    end
  next i
return


**********************
* Execute a SQL Script
**********************
* Handle      [in ] - Query Handle (hQry)
* Script      [in ] - SQL Script
* Ret         [out] - Cumulative result:  Assumed to start as TRUE$, failure sets to FALSE$, never reset to TRUE$
ExecuteScript:
  Ret = (Ret and QryMethod(Handle, QRY_EXECUTE$, Script))
  QryMethod(Handle, QRY_CANCEL$)
return

--[begin_sep::sremotsuc_pw**corpts*selpmaxe::end_sep]--
{
   "sysrepos" : {
      "reposID" : {
         "appID"   : "EXAMPLES",
         "typeID"  : "STPROC",
         "classID" : "",
         "entityID"   : "WP_CUSTOMERS"
      },
      "author"         : "SYSPROG",
      "accessPermit"   : ["$PUBLIC"],
      "updatePermit"   : ["$PUBLIC"],
      "checkedOut"     : "0",
      "colorKey"       : "",
      "description"    : [],
      "document"       : [],
      "evaluate"       : "0",
      "evaluateNotes"  : [],
      "imageCount"     : "",
      "keyword"        : [],
      "logPointer"     : "EXAMPLES*STPROC**WP_CUSTOMERS*15619.5000810185",
      "module"         : [],
      "pointedAppID"   : [],
      "pointedEntID"   : [],
      "pointerAppID"   : [],
      "pointerEntID"   : [],
      "publishable"    : "1",
      "recompile"      : "0",
      "scmpurge"    : "",
      "scmAuthor"  : "",
      "scmCommit"  : "",
      "scmFormat"      : "",
      "scmInclude"     : "",
      "scmPullDt"     : "",
      "scmPushDt"     : "",
      "shareable"      : "1",
      "state"          : "1",
      "subKey"         : [],
      "sysBuild"       : "",
      "sysPublish"     : "",
      "title"          : "EXAMPLES*STPROC**WP_CUSTOMERS",
      "updatedOn"      : "05 OCT 2010 12:00",
      "updatedBy"      : "SYSPROG",
      "usedBy"         : ["EXAMPLES*STPROCEXE**WP_CUSTOMERS"],
      "uses"           : [],
      "user1"          : [],
      "user2"          : [],
      "user3"          : [],
      "user4"          : [],
      "user5"          : [],
      "user6"          : [],
      "user7"          : [],
      "user8"          : [],
      "user9"          : []
   },
   "sysreposLog" : {
      "logEntries" : [
      ]
   },

   "encoding" : "ansi"
}